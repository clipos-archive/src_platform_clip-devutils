#! /bin/sh
# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright Â© 2007-2018 ANSSI. All Rights Reserved.
set -e

. /etc/clip-build.conf
ROOTFS=${ROOTFS:-/opt/clip-installer/squashfs-root}
EMERGE_OPTS="--verbose --quiet --update"
export LANG=fr_FR.UTF-8

if [[ -z "${CLIP_BASE}" ]] ; then
	echo "CLIP_BASE must be defined and contain the path to the portage trees." > /dev/stderr
	exit 1
fi
if [[ -z "${CLIP_ARCH}" ]] ; then
	echo "CLIP_ARCH must be defined and contain the current/target architecture." > /dev/stderr
	exit 1
fi


prepare()
{
	echo "[*] Preparing host"
	emerge $EMERGE_OPTS --newuse --deep --with-bdeps=y --keep-going=y @world
	emerge $EMERGE_OPTS --depclean --deep
	revdep-rebuild --ignore
	lafilefixer --justfixit
	etc-update
}

clean()
{
	echo "[*] Cleaning target folder"
	grep -q ${ROOTFS} /proc/mounts && exit -1
	rm -rf ${ROOTFS}
}

case $1 in
	prepare)
		prepare
		;;
	clean)
		clean
		exit 0
		;;
esac

# Fail if target folder already exists
echo "[*] Creating target folder"
mkdir ${ROOTFS} || exit -1
mkdir -p ${ROOTFS}/.persistent/root
mkdir -p ${ROOTFS}/.persistent/var/log

echo "[*] Preparing config"
mkdir -p ${ROOTFS}/etc/portage
ln -s ${CLIP_BASE}/portage-overlay-clip/profiles/clip-livecd/${CLIP_ARCH} ${ROOTFS}/etc/portage/make.profile

for var in CLIP_BASE PORTDIR PORTDIR_OVERLAY DISTDIR MAKEOPTS ACCEPT_KEYWORDS;
do
	grep "${var}=" /etc/make.conf || true
done > ${ROOTFS}/etc/make.conf
echo CONFIG_PROTECT=\"-* /etc/make.conf\" >> ${ROOTFS}/etc/make.conf

if [ "${CLIP_ARCH}" == amd64 ]; then
	echo USE="-ccsd" >> ${ROOTFS}/etc/make.conf
	mkdir -p ${ROOTFS}/usr
	ln -s lib64 ${ROOTFS}/lib
	ln -s lib64 ${ROOTFS}/usr/lib
fi

echo Europe/Paris > ${ROOTFS}/etc/timezone

echo "[*] Bootstraping minimal system"
pkgs="
	app-admin/eselect
	app-arch/tar
	app-arch/gzip
	app-shells/bash
	clip-layout/baselayout-sdk
	dev-libs/mpc
	sys-apps/baselayout
	sys-apps/diffutils
	sys-apps/findutils
	sys-apps/grep
	sys-apps/gawk
	sys-apps/openrc
	sys-apps/texinfo
	sys-devel/binutils
	sys-devel/gcc
	sys-devel/make
	sys-devel/patch
	sys-kernel/linux-headers
	sys-libs/glibc
	"

if [[ "${CLIP_ARCH}" = "armel" ]] ; then
	pkgs+="app-emulation/qemu-bin"
fi

emerge ${EMERGE_OPTS} --oneshot --config-root=${ROOTFS} --root=${ROOTFS} $pkgs

echo "[*] Setup mount points inside the chroot"
mkdir -p ${ROOTFS}/proc
mkdir -p ${ROOTFS}/root
mkdir -p ${ROOTFS}/home
mkdir -p ${ROOTFS}/dev
mkdir -p ${ROOTFS}/opt/clip-int
mkdir -p ${ROOTFS}/var/tmp/portage

echo "[*] Preparing postinst script"
cat << EOF > ${ROOTFS}/root/postinst.sh
#!/bin/sh

set -e

EMERGE_OPTS="${EMERGE_OPTS}"

# Setup env
echo "	[+] Preparing environment"
[ -z "\$HOME" ] && export HOME=/root
[ -z "\$TERM" ] && export TERM=xterm
eselect python update
env-update
locale-gen

# Build @system
# It seems to be a good idea to first rebuild libtool
echo "	[+] Building libtool first"
emerge --verbose --quiet --oneshot sys-devel/libtool
# udev: break circular dependency between udev and util-linux
# internal-glib: break circular dependency between build-docbook-catalog and util-linux
echo "	[+] Building util-linux with USE='internal-glib -udev'"
USE="internal-glib -udev" emerge \$EMERGE_OPTS --empty --deep sys-apps/util-linux
echo "	[+] Re-Building some packages with full USE flags"
emerge --verbose --quiet --oneshot sys-devel/libtool
echo "	[+] Re-Building @system with full USE flags"
emerge \$EMERGE_OPTS --newuse --deep --with-bdeps=y @system

# Install clip-livecd
# clip-livecd: break circular dependency with X
echo "	[+] Building clip-livecd with USE=-X"
USE="-X" emerge \$EMERGE_OPTS clip-dev/clip-livecd
echo "	[+] Building clip-livecd"
emerge \$EMERGE_OPTS --newuse --deep --with-bdeps=y clip-dev/clip-livecd

echo "	[+] Post configuration"
eselect vi update
source /etc/profile
env-update

echo "	[+] Add udev to startup scripts"
eselect rc add udev sysinit

echo "	[+] Add pcscd to startup scripts"
eselect rc add pcscd

EOF

chmod 755 ${ROOTFS}/root/postinst.sh

# Regenerate make.conf/make.profile for use inside the chrooted livecd environment (portage tree in /opt/clip-int)
cat > "${ROOTFS}/etc/make.conf" <<EOF
PORTDIR="/opt/clip-int/portage"
PORTDIR_OVERLAY="/opt/clip-int/portage-overlay-dev /opt/clip-int/portage-overlay /opt/clip-int/portage-overlay-clip /opt/clip-int/portage-overlay-extra-dev /opt/clip-int/portage-overlay /opt/clip-int/portage-overlay-extra"
GENTOO_MIRRORS="file:///opt/clip-int/distfiles-dev file:///opt/clip-int/distfiles file:///opt/clip-int/distfiles-extra-dev files:///opt/clip-int/distfiles-extra"
FETCHCOMMAND="/usr/lib/portage/bin/clip-fetch \\\${URI} \\\${DISTDIR}/\\\${FILE}"
RESUMECOMMAND="/usr/lib/portage/bin/clip-fetch \\\${URI} \\\${DISTDIR}/\\\${FILE}"
DISTDIR=/tmp/distfiles-dev
CONFIG_PROTECT="-* /etc/make.conf"
EOF

for var in MAKEOPTS;
do 
	grep "${var}=" /etc/make.conf || true
done >> ${ROOTFS}/etc/make.conf

rm -f "${ROOTFS}/etc/portage/make.profile" 
ln -s /opt/clip-int/portage-overlay-clip/profiles/clip-livecd/${CLIP_ARCH} ${ROOTFS}/etc/portage/make.profile 


echo "[*] Executing postinst script"
/opt/clip-livecd/enter-loop.sh ${ROOTFS} /root/postinst.sh

rm "${ROOTFS}/root/postinst.sh"

echo "[*] Done."
