#!/usr/bin/perl -ls
# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright © 2007-2018 ANSSI. All Rights Reserved.
#usage clip-update-conf 
#	opens /opt/clip-int/pkgdb/all.conf 
#	      /opt/clip-int/portage-overlay-clip/clip-conf/
use version;
#use feature switch;

open PKGDB,"/opt/clip-int/pkgdb/all.conf" or die "cannot open pkgdb!";

#@conffile=</opt/clip-int/portage-overlay-clip/clip-conf/clip-apps*/*.ebuild>;
@conffile=</opt/clip-int/portage-overlay-clip/clip-conf/*/*.ebuild>;
map {chomp} @conffile;

#Parse  all.conf file
# for masked packages add -masked to their name
# construct a hash whose key is the package name and value 
# a hash associating the fields of the pkg db an their value.
#
#the package name is computed form :
# -the  field "category"
# -the key (the field between [ ])
#
#
#special provision is maid for clip-rm_deb_suffix
#which is honored for creating multiple .deb packages
#

sub parse_pkgdb_for_suffixes;

our %pkg=parse_pkgdb_for_suffixes();

print "\n";
print STDERR "\n";
for $conffile (@conffile)
{
  my @bumpstr;
  open FILE,$conffile;
  {local $/;$file=<FILE>;}
  close FILE;
  %hash=($file=~/^\s+=(.*\/.*)-(\d[^"]*?)$/mg);
  while(($k,$v)=each(%hash))
  {
 # print "clef $k version $v";
   $k=~s/_/-/g;
   $k=lc($k);
  if($pkg{$k.'-masked'} && !$pkg{$k})
  {
  	print 'Cannot update ',$k,' which is masked';
	next;
  }
  warn "In processing $conffile :\nrefresh pkgdb $k is not present " and next unless ($pkg{$k});
  #on compare les versions
  my $tmpval=compare_version($v,$pkg{$k}->{'version-clip'});
  if ($tmpval==-1) { print 'MAJ ',"$k-$v vers $k-",$pkg{$k}->{'version-clip'};
             push @bumpstr ,$k;
		 $file=~s/$k-$v/$k-$pkg{$k}->{'version-clip'}/g}
  if ($tmpval==1) { warn "refresh your pckgdb $k is newer in conf" . 
		  "file\n\t$v > $pkg{$k}->{'version-clip'}";}
  }
  open FILE,">$conffile";
  print FILE $file;
  close FILE;
  if (@bumpstr)
  { 
    $"=",";
    my $bumpstr="";
    system("cd ".($conffile=~s/\/[^\/]*?$//r)." && clip-bump");
    open Changelog,"+<",(($conffile=~s/\/[^\/]*?$//r)."/ChangeLog");
    {local $/; $file=<Changelog>;}
    seek Changelog,0,0;
    $file=~s/([^+]*?\+.*?)$//sm;#on stock dans $1 le debut du changeLog
    print Changelog $1;
    for(@bumpstr)
    {
      $bumpstr.=",\n" if (length($bumpstr)+length($_)>72);
      $bumpstr.=$_;;
    }
    print Changelog "  Bump $bumpstr";
    print Changelog $file;
    close Changelog;
    system("cd ".($conffile=~s/\/[^\/]*?$//r)." && ebuild ".
    	($conffile=~s/.*\/(.*)-r(\d+)(.*)/"$1-r".($2+1)."$3"/er)." manifest");
  }
}  



sub compare_version
{
	my ($a,$b)=@_;
	my @a_comp=($a=~/(\D+|\d+|-r\d+)/g);
   	my @b_comp=($b=~/(\D+|\d+|-r\d+)/g);
  	my $res=0; 
  for my $c (0..((@b_comp>@a_comp)?@a_comp-1:@b_comp-1))
 	{
#	print "|$a_comp[$c]| vs |$b_comp[$c]|"; 
	 if($a_comp[$c]=~/^\d+$/)
		{
#		print "chiffre";
			if($a_comp[$c]>$b_comp[$c])
			{
			  $res=1;
			  last;
			}
			if($a_comp[$c]<$b_comp[$c])
			{
			  $res=-1;
			  last;
			}
		} 
 	  else
		{
#		print "lettre";
			if($a_comp[$c] gt $b_comp[$c])
			{
			  $res=1;
			  last;
			}
			if($a_comp[$c] lt $b_comp[$c])
			{
			  $res=-1;
			  last;
			}
		}	 
#	print "res $res";
	}
#print "res $res";
return $res;
}

sub parse_pkgdb_for_suffixes
{
$/="";
my %pkg;
while(<PKGDB>)
{
	s/\[(.*?)\.(\d+)\]\n//;
	$key=$1;
	#
	#Catch wild '_' and transforms them into gentle '-'
	$key=~s/_/-/g;
	$key=lc($key);
	my %j=/^(.*)\s+=\s+(.*)$/mg;
	my $k='clip-rm_deb_suffix';
	$key.="-masked" if ($j{'masked'});
	if ($j{$k})
	{
		for $suffix (map {s/\b_\b//r} (split /\s+/, $j{$k}))
		{
			$suffix=~s/\.//g;
	#		print $j{'category'}."/".$key.$suffix;
			if($pkg{$j{'category'}."/".$key.$suffix})
			{
				warn("outch I already have one ".$j{'category'}."/".$key.$suffix) if($verbose);
				next if(
				compare_version($pkg{$j{'category'}."/"
				.$key.$suffix}{'version-clip'},
				$j{'version-clip'})>=0)
			}
			$pkg{$j{'category'}."/".$key.$suffix}=\%j;#ici c'est des references
		}
	}
	else
	{
	if($pkg{$j{'category'}."/".$key})
	{
	warn("outch I already have one ".$j{'category'}."/".$key) if ($verbose);
	next if(
	compare_version($pkg{$j{'category'}."/"
	   .$key}{'version-clip'}, $j{'version-clip'})>=0)
	}
#	print $j{'category'}."/".$key;
	$pkg{$j{'category'}."/".$key}=\%j;#ici c'est des references
	}
}
close PKGDB;
return %pkg;
}

